6c6
< #blender --background --python export-meshes.py -- <infile.blend> <outfile.blob>
---
> #blender --background --python export-meshes.py -- <infile.blend> <outfile.p[n][c][t]>
16c16
< 	print("\n\nUsage:\nblender --background --python export-meshes.py -- <infile.blend> <outfile.blob>\nExports the meshes referenced by all objects to a binary blob, indexed by the names of the objects that reference them.\n")
---
> 	print("\n\nUsage:\nblender --background --python export-meshes.py -- <infile.blend> <outfile.p[n][c][t]>\nExports the meshes referenced by all objects to a binary blob, indexed by the names of the objects that reference them.\n")
22c22,57
< import bpy, mathutils
---
> class FileType:
> 	def __init__(self, magic):
> 		self.magic = magic
> 		self.position = (b"p" in magic)
> 		self.normal = (b"n" in magic)
> 		self.color = (b"c" in magic)
> 		self.texcoord = (b"t" in magic)
> 		self.vertex_bytes = 0
> 		if self.position: self.vertex_bytes += 3 * 4
> 		if self.normal: self.vertex_bytes += 3 * 4
> 		if self.color: self.vertex_bytes += 4
> 		if self.texcoord: self.vertex_bytes += 2 * 4
> 
> filetypes = {
> 	".p" : FileType(b"p..."),
> 	".pn" : FileType(b"pn.."),
> 	".pc" : FileType(b"pc.."),
> 	".pt" : FileType(b"pt.."),
> 	".pnc" : FileType(b"pnc."),
> 	".pnt" : FileType(b"pnt."),
> 	".pnct" : FileType(b"pnct"),
> }
> 
> filetype = None
> for kv in filetypes.items():
> 	if outfile.endswith(kv[0]):
> 		assert(filetype == None)
> 		filetype = kv[1]
> 
> if filetype == None:
> 	print("ERROR: please name outfile with one of:")
> 	for k in filetypes.keys():
> 		print("\t\"" + k + "\"")
> 	exit(1)
> 
> import bpy
27d61
< bpy.ops.wm.open_mainfile(filepath=infile)
29c63
< do_texcoord = False
---
> bpy.ops.wm.open_mainfile(filepath=infile)
80c114
< 	index += struct.pack('I', vertex_count + len(mesh.polygons) * 3)
---
> 	index += struct.pack('I', len(mesh.polygons) * 3)
82c116,121
< 	uvs = None
---
> 	colors = None
> 	if filetype.color:
> 		if len(obj.data.vertex_colors) == 0:
> 			print("WARNING: trying to export color data, but object '" + name + "' does not have color data; will output 0xffffffff")
> 		else:
> 			colors = obj.data.vertex_colors.active.data
84,85c123,124
<  
< 	if do_texcoord:
---
> 	uvs = None
> 	if filetype.texcoord:
90d128
< 	colors = None
92,100c130
< 	#referenced from game 3 code
<  
< 	if do_texcoord:
< 		if len(obj.data.vertex_colors) == 0:
< 			print("WARNING: trying to export texcoord data, but object '" + name + "' does not color  data; will output white")
< 		else:
< 			colors = obj.data.vertex_colors.active.data
< 	#temp
<         #write the mesh:
---
> 	#write the mesh:
109,116c139,148
< 			for x in loop.normal:
< 				data += struct.pack('f', x)
< 			#TODO: set 'col' based on object's active vertex colors array.
< 			# you should be able to use code much like the texcoord code below.
< 			#referenced from game 3 code
< 			col = colors[poly.loop_indices[i]].color
< 			data += struct.pack('BBBB', int(col.r * 255), int(col.g * 255), int(col.b * 255), 255)
< 			if do_texcoord:
---
> 			if filetype.normal:
> 				for x in loop.normal:
> 					data += struct.pack('f', x)
> 			if filetype.color:
> 				if colors != None:
> 					col = colors[poly.loop_indices[i]].color
> 					data += struct.pack('BBBB', int(col.r * 255), int(col.g * 255), int(col.b * 255), 255)
> 				else:
> 					data += struct.pack('BBBB', 255, 255, 255, 255)
> 			if filetype.texcoord:
121a154,156
> 
> 			if filetype.texcoord:
> 				pass
125c160
< #assert(vertex_count * (4*3+4*3+4*1) == len(data))
---
> assert(vertex_count * filetype.vertex_bytes == len(data))
130c165
< blob.write(struct.pack('4s',b'dat0')) #type
---
> blob.write(struct.pack('4s',filetype.magic)) #type
